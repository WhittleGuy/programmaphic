{"version":3,"sources":["js/components/Nav.js","js/library/moire.js","js/pages/Moire.js","js/pages/PageTwo.js","js/pages/PageThree.js","js/pages/PageFour.js","js/components/Main.js","js/components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","Component","p","setup","createCanvas","windowWidth","windowHeight","imageMode","CENTER","angleMode","DEGREES","translate","colorMode","HSL","background","gfx","createGraphics","stroke","strokeWeight","graphics","count","i","x","random","y","point","points","image","rotate","noLoop","draw","Moire","id","sketch","moire","PageTwo","PageThree","PageFour","Main","exact","path","component","Footer","href","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAGqBA,E,iLAEjB,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAASA,UAAU,UAAUC,GAAG,WAAhC,e,GALuBC,a,QCAlB,WAAAC,GA4BbA,EAAEC,MAAQ,WAzBRD,EAAEE,aAAaF,EAAEG,YAA8B,GAAjBH,EAAEI,cAChCJ,EAAEK,UAAUL,EAAEM,QACdN,EAAEO,UAAUP,EAAEQ,SACdR,EAAES,UAAUT,EAAEG,YAAc,EAAqB,GAAjBH,EAAEI,aAAsB,GACxDJ,EAAEU,UAAUV,EAAEW,KACdX,EAAEY,WAAW,GAuBb,IAAIC,EAAMb,EAAEc,eAAed,EAAEG,YAA8B,GAAjBH,EAAEI,eAnB7B,SAAAS,GACfA,EAAIH,UAAUG,EAAIF,KAClBE,EAAIE,OAAO,WACXF,EAAIG,aAAa,GAkBjBC,CAASJ,GAdI,SAACA,EAAKK,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAOC,IAAK,CAC9B,IAAIC,EAAIP,EAAIQ,OAAO,EAAGR,EAAIV,YAAc,GACpCmB,EAAIT,EAAIQ,OAAO,EAAGR,EAAIT,aAAe,GACzCS,EAAIU,MAAMH,EAAGE,IAWfE,CAAOX,EAAK,MAEZb,EAAEyB,MAAMZ,EAAK,EAAG,GAChBb,EAAE0B,OAAO,GACT1B,EAAEyB,MAAMZ,EAAK,EAAG,GAEhBb,EAAE2B,UAGJ3B,EAAE4B,KAAO,c,iBC1CUC,E,iLAEjB,OACE,oCACE,yBAAKhC,UAAU,cAAciC,GAAG,OAC9B,kBAAC,IAAD,CAAWC,OAAQC,U,GALMjC,aCFdkC,E,iLAEjB,OAAO,yBAAKpC,UAAU,oB,GAFWE,aCAhBmC,E,iLAEjB,OAAO,yBAAKrC,UAAU,oB,GAFaE,aCAlBoC,E,iLAEjB,OAAO,yBAAKtC,UAAU,oB,GAFYE,aCmBvBqC,EAbF,kBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,IAAD,CAAUxC,GAAG,aAEf,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,SAASC,UAAWV,IACtC,kBAAC,IAAD,CAAOS,KAAK,WAAWC,UAAWN,IAClC,kBAAC,IAAD,CAAOK,KAAK,aAAaC,UAAWL,IACpC,kBAAC,IAAD,CAAOI,KAAK,YAAYC,UAAWJ,IACnC,kBAAC,IAAD,CAAOG,KAAK,KAAKC,UAAWV,MCfXW,E,iLAEjB,OACE,yBAAK3C,UAAU,UACb,uBAAG4C,KAAK,iCAAiCC,IAAI,uBAC3C,uBAAG7C,UAAU,0BAGf,uBAAG4C,KAAK,wCACN,uBAAG5C,UAAU,oBAGf,uBAAG4C,KAAK,qCACN,uBAAG5C,UAAU,wB,GAbaE,aCerB4C,MAVf,WACE,OACE,yBAAK9C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAc+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4efdd275.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport default class Nav extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"NavBar\">\r\n        <div className=\"NavLinks\">\r\n          <NavLink className=\"NavLink\" to=\"./Moire\">\r\n            MOIRE\r\n          </NavLink>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","//! Original tutorial: https://medium.com/front-end-weekly/learning-the-p5-canvas-drawing-library-in-es6-and-webpack-bf514a679544\r\n//! Grouping into multiple functions: https://github.com/eatspaint/generative/blob/master/js/sketches/moire.js\r\n\r\nexport default p => {\r\n  //* Creating the main canvas\r\n  const canvas = () => {\r\n    p.createCanvas(p.windowWidth, p.windowHeight * 0.9);\r\n    p.imageMode(p.CENTER);\r\n    p.angleMode(p.DEGREES);\r\n    p.translate(p.windowWidth / 2, (p.windowHeight * 0.9) / 2);\r\n    p.colorMode(p.HSL);\r\n    p.background(0);\r\n  };\r\n\r\n  //* Creating the graphics properties\r\n  const graphics = gfx => {\r\n    gfx.colorMode(gfx.HSL);\r\n    gfx.stroke(\"#5bffce\");\r\n    gfx.strokeWeight(3);\r\n  };\r\n\r\n  //* Creating the points on the graphics \"object\"\r\n  const points = (gfx, count) => {\r\n    for (let i = 0; i < count; i++) {\r\n      let x = gfx.random(0, gfx.windowWidth + 1);\r\n      let y = gfx.random(0, gfx.windowHeight + 1);\r\n      gfx.point(x, y);\r\n    }\r\n  };\r\n\r\n  //* Only run once. Calls initializing functions, generates image, generates rotated image.\r\n  p.setup = () => {\r\n    canvas();\r\n\r\n    let gfx = p.createGraphics(p.windowWidth, p.windowHeight * 0.9);\r\n\r\n    graphics(gfx);\r\n    points(gfx, 2500);\r\n\r\n    p.image(gfx, 0, 0);\r\n    p.rotate(1);\r\n    p.image(gfx, 0, 0);\r\n\r\n    p.noLoop(); //* Stops draw function from looping\r\n  };\r\n\r\n  p.draw = () => {};\r\n};\r\n","import React, { Component } from \"react\";\r\nimport moire from \"../library/moire\";\r\nimport P5Wrapper from \"react-p5-wrapper\";\r\n\r\nexport default class Moire extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"main-window\" id=\"App\">\r\n          <P5Wrapper sketch={moire}></P5Wrapper>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class PageTwo extends Component {\r\n  render() {\r\n    return <div className=\"main-window\"></div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class PageThree extends Component {\r\n  render() {\r\n    return <div className=\"main-window\"></div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class PageFour extends Component {\r\n  render() {\r\n    return <div className=\"main-window\"></div>;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\nimport Moire from \"../pages/Moire\";\r\nimport PageTwo from \"../pages/PageTwo\";\r\nimport PageThree from \"../pages/PageThree\";\r\nimport PageFour from \"../pages/PageFour\";\r\n\r\nconst Main = () => (\r\n  <Switch>\r\n    <Route exact path=\"/\">\r\n      <Redirect to=\"./Moire\" />\r\n    </Route>\r\n    <Route exact path=\"/Moire\" component={Moire} />\r\n    <Route path=\"/PageTwo\" component={PageTwo} />\r\n    <Route path=\"/PageThree\" component={PageThree} />\r\n    <Route path=\"/PageFour\" component={PageFour} />\r\n    <Route path=\"/*\" component={Moire} />\r\n  </Switch>\r\n);\r\n\r\nexport default Main;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Footer\">\r\n        <a href=\"https://www.brandonwhittle.com\" rel=\"noopener norefferer\">\r\n          <i className=\"fas fa-dumpster-fire\"></i>\r\n        </a>\r\n\r\n        <a href=\"https://www.twitter.com/whittleguyyy\">\r\n          <i className=\"fab fa-twitter\"></i>\r\n        </a>\r\n\r\n        <a href=\"https://www.github.com/whittleguy\">\r\n          <i className=\"fab fa-github\"></i>\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\n\r\nimport Nav from \"./js/components/Nav\";\r\nimport Main from \"./js/components/Main\";\r\nimport Footer from \"./js/components/Footer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Nav />\r\n      <Main />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}